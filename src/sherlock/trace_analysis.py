# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import abc
import dataclasses
import enum


@enum.unique
class TraceAnalysisMode(enum.Enum):
    ANALYSIS_ALL = enum.auto()
    ANALYSIS_URL = enum.auto()


@dataclasses.dataclass
class TraceAnalysisModuleResult:
    """Class representing a result of an analysis by a module against a trace file.

    Attributes:
        module_name: the name of the analysis module
        trace_filepath: the path of the trace file to be analysed
        results: results generated by the module
    """
    module_name: str
    trace_filepath: str
    results: dict | list | str

    def to_dict(self):
        """Convert the object to a dictionary."""
        return {
            'module_name': self.module_name,
            'trace_filepath': self.trace_filepath,
            'results': self.results,
        }


class TraceAnalysisModule(abc.ABC):
    """Abstract class representing a trace analysis module.

    Attributes:
        module_name: the name of the analysis module
    """
    module_name: str

    @abc.abstractmethod
    def run(self, trace_filepath: str) -> TraceAnalysisModuleResult:
        """Run the analysis against the trace specified by `trace_filepath`."""
